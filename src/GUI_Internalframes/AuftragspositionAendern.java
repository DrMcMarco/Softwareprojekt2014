/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI_Internalframes;

import DAO.ApplicationException;
import DTO.Auftragskopf;
import DTO.Auftragsposition;
import Documents.*;
import Interfaces.*;
import JFrames.GUIFactory;
import java.awt.Color;
import java.awt.Component;
import java.text.ParseException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Luca Terrasi
 *
 * 10.12.2014 Terrasi, Dokumentation und Logik 16.12.2014 Terrasi,
 * Funktionsimplementierung im "Zurück"-Button 06.01.2015 Terrasi,
 * Anwendungslogik für das anzeigen der Auftragspositions- maske. 08.01.2015
 * Terrasi, Überarbeitung der Anwendungslogik und das hinzufügen von weiteren
 * Funktion.
 */
public class AuftragspositionAendern extends javax.swing.JInternalFrame implements InterfaceViewsFunctionality {

    /*
     Speichervariablen
     */
    ArrayList<Component> fehlendeEingaben;// ArrayList für Eingabefelder des Auftragkopfes.

    Component c;
    GUIFactory factory;
    AuftragspositionAnzeigen auftragspositionAnzeigen;
    InterfaceMainView hauptFenster;


    /*
     Syntax
     */
//    private static final String auftragskopfID_syntax = "\\d{1,9}?";
//    private static final String auftragspositionsID_syntax = "\\d{1,9}?";

    /*
     Variablen für Farben
     */
    Color warningfarbe = Color.YELLOW;
    Color hintergrundfarbe = Color.WHITE;

    /*
     Augabetexte für Meldungen
     */
    final String FEHLER = "Fehler";
    final String fehlermeldung_titel = "Fehlerhafte Eingabe";
    final String fehlermeldungAuftragskopfIDtext = "\"Bitte geben sie alle notwendigen"
            + " Eingaben ein!";


    /*----------------------------------------------------------*/
    /* Datum Name Was */
    /* 10.12.2014 Terrasi, Dokumentation und Logik. */
    /* 06.01.2015 Terrasi, hinzufügen eines Interfaceobjektes
     und eines AuftragspositionAnzeigenobjektes.*/
    /*----------------------------------------------------------*/
    /**
     * Konstruktor, Erzeugung eines Auftragspositionsobjektes.
     *
     * @param factory
     * @param positionAnzeigenView
     * @param mainView
     */
    public AuftragspositionAendern(GUIFactory factory,
            AuftragspositionAnzeigen positionAnzeigenView,
            InterfaceMainView mainView) {
        initComponents();

        this.factory = factory;
        this.auftragspositionAnzeigen = positionAnzeigenView;
        this.hauptFenster = mainView;

        //Initialisierung der Speichervariblen
        fehlendeEingaben = new ArrayList<>();

        //Zuweisung der Documents
        auftragskopfID_jTextField.setDocument(new UniversalDocument("0123456789", false));
        AuftragspositionID_jTextField.setDocument(new UniversalDocument("0123456789", false));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jB_Zurueck = new javax.swing.JButton();
        jB_Speichern = new javax.swing.JButton();
        jB_Anzeigen = new javax.swing.JButton();
        jB_Loeschen = new javax.swing.JButton();
        jB_Suchen = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        AuftragskopfID_jLabel = new javax.swing.JLabel();
        auftragskopfID_jTextField = new javax.swing.JTextField();
        Enter_jButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        AuftragspositionID_jTextField = new javax.swing.JTextField();

        setTitle("Auftragsposition ändern");
        setPreferredSize(new java.awt.Dimension(580, 300));
        setRequestFocusEnabled(false);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);

        jToolBar1.setBorder(null);
        jToolBar1.setRollover(true);
        jToolBar1.setEnabled(false);

        jB_Zurueck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI_Internalframes/Home2.PNG"))); // NOI18N
        jB_Zurueck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_ZurueckActionPerformed(evt);
            }
        });
        jToolBar1.add(jB_Zurueck);

        jB_Speichern.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI_Internalframes/Speichern.PNG"))); // NOI18N
        jB_Speichern.setEnabled(false);
        jToolBar1.add(jB_Speichern);

        jB_Anzeigen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI_Internalframes/Bearbeiten.PNG"))); // NOI18N
        jB_Anzeigen.setEnabled(false);
        jToolBar1.add(jB_Anzeigen);

        jB_Loeschen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI_Internalframes/Löschen.PNG"))); // NOI18N
        jB_Loeschen.setEnabled(false);
        jToolBar1.add(jB_Loeschen);

        jB_Suchen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI_Internalframes/Suche.PNG"))); // NOI18N
        jB_Suchen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_SuchenActionPerformed(evt);
            }
        });
        jToolBar1.add(jB_Suchen);

        AuftragskopfID_jLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        AuftragskopfID_jLabel.setLabelFor(auftragskopfID_jTextField);
        AuftragskopfID_jLabel.setText("Auftragskopf-ID      :");
        AuftragskopfID_jLabel.setToolTipText("");

        auftragskopfID_jTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                auftragskopfID_jTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                auftragskopfID_jTextFieldFocusLost(evt);
            }
        });
        auftragskopfID_jTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                auftragskopfID_jTextFieldKeyPressed(evt);
            }
        });

        Enter_jButton.setText("Weiter");
        Enter_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Enter_jButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setLabelFor(AuftragspositionID_jTextField);
        jLabel1.setText("Auftragsposition-ID :");

        AuftragspositionID_jTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AuftragspositionID_jTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                AuftragspositionID_jTextFieldFocusLost(evt);
            }
        });
        AuftragspositionID_jTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AuftragspositionID_jTextFieldKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AuftragskopfID_jLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(auftragskopfID_jTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addComponent(AuftragspositionID_jTextField))
                .addGap(18, 18, 18)
                .addComponent(Enter_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(118, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AuftragskopfID_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(auftragskopfID_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(AuftragspositionID_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Enter_jButton))
                .addContainerGap(214, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Beim wählen des Eingabefeldes, wird alles selektiert.
     *
     * @param evt
     */
    private void auftragskopfID_jTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_auftragskopfID_jTextFieldFocusGained
        auftragskopfID_jTextField.setBackground(hintergrundfarbe);//Setzen der Hintergrundsfarbe des Eingabefeldes
        auftragskopfID_jTextField.selectAll();//Selektion des Eingabefeldes
    }//GEN-LAST:event_auftragskopfID_jTextFieldFocusGained

    /**
     * Beim wählen des Eingabefeldes, wird alles selektiert.
     *
     * @param evt
     */
    private void AuftragspositionID_jTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_AuftragspositionID_jTextFieldFocusGained
        AuftragspositionID_jTextField.setBackground(hintergrundfarbe);//Setzen der Hintergrundsfarbe des Eingabefeldes
        AuftragspositionID_jTextField.selectAll();//Selektion des Eingabefeldes
    }//GEN-LAST:event_AuftragspositionID_jTextFieldFocusGained

    /**
     * Beim Focuslost des Eingabefeldes für die Auftragskopf-ID, wird auf die
     * Richtigkeit der Eingabe geprüft und gibt gegebenen falls eine
     * Fehlermeldung aus. Dabei springt man zurück in das Eingabefeld.
     *
     * @param evt
     */
    private void auftragskopfID_jTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_auftragskopfID_jTextFieldFocusLost
        // Aufruf der Schnittstellenmethode für die Focuslostüberprüfung
//        ueberpruefungVonFocusLost(auftragskopfID_jTextField, auftragskopfID_syntax,
//                fehlermeldung_titel, fehlermeldungAuftragskopfIDtext);
    }//GEN-LAST:event_auftragskopfID_jTextFieldFocusLost

    /**
     * Beim Focuslost des Eingabefeldes für die Auftragspositions-ID, wird auf
     * die Richtigkeit der Eingabe geprüft und gibt gegebenen falls eine
     * Fehlermeldung aus. Dabei springt man zurück in das Eingabefeld.
     *
     * @param evt
     */
    private void AuftragspositionID_jTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_AuftragspositionID_jTextFieldFocusLost
        // Aufruf der Schnittstellenmethode für die Focuslostüberprüfung
//        ueberpruefungVonFocusLost(AuftragspositionID_jTextField, auftragspositionsID_syntax,
//                fehlermeldung_titel, fehlermeldungAuftragspositionIDtext);
    }//GEN-LAST:event_AuftragspositionID_jTextFieldFocusLost

    // Falls alle Eingaben getätigt wurden sind, wird nach der gesuchten Auftragsposition
    // gesucht.
    // 08.01.2015
    private void Enter_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Enter_jButtonActionPerformed
        ueberpruefen();
        try {
//            if (fehlendeEingaben.isEmpty()) {
            Auftragsposition position = GUIFactory.getDAO().
                    gibAuftragsposition(Long.parseLong(auftragskopfID_jTextField.getText()),
                            Long.parseLong(AuftragspositionID_jTextField.getText()));
            if (position != null) {

                // Überprüft anhand des Framestitels, ob es das nächste Fenster
                // im Anzeigen-/ oder im Ändernmodus anzeigen soll.
                if (this.getTitle().equals("Auftragsposition ändern Einstieg")) {
                    this.auftragspositionAnzeigen.setStatusAender();// Setzt das Internalframe in den Ändernmodus.
                    zuruecksetzen();//Methode die bestimmte Eingabefelder leert
                    this.auftragspositionAnzeigen.setzeEingaben(position);

                    this.setVisible(false);
                    this.hauptFenster.setFrame(this.auftragspositionAnzeigen);// Hauptfenster macht übergebene Maske sichtbar.
                } else {
                    this.auftragspositionAnzeigen.setStatusAnzeigen();// Setzt das Internalframe in den Anzeigenmodus.
                    zuruecksetzen();//Methode die bestimmte Eingabefelder leert
                    this.auftragspositionAnzeigen.setzeEingaben(position);
                    this.setVisible(false);
                    this.hauptFenster.setFrame(this.auftragspositionAnzeigen);// Hauptfenster macht übergebene Maske sichtbar.
                }
            }

//            } else {//Wenn Eingaben fehlen.
//                // Methodenaufruf um daraufhinzuweisen das nicht alle eingaben 
//                // getätigt worden sind
//                fehlEingabenMarkierung(fehlendeEingaben, fehlermeldung_titel,
//                        fehlermeldungAuftragskopfIDtext, warningfarbe);//Meldung wird ausgegeben und          
//            }
        } catch (NumberFormatException e) {
            this.hauptFenster.setStatusMeldung(fehlermeldungAuftragskopfIDtext);
        } catch (ApplicationException e) {
            JOptionPane.showMessageDialog(null, e.getMessage(),
                    FEHLER, JOptionPane.ERROR_MESSAGE);
//            this.hauptFenster.setStatusMeldung(e.getMessage());
        } catch (NullPointerException e) {
            this.hauptFenster.setStatusMeldung("Fehlende Eingaben!!!");
        }

    }//GEN-LAST:event_Enter_jButtonActionPerformed

    /**
     * Aktion die beim betätigen des Zurück-Buttons ausgeführt wird. Es wird von
     * der Guifactory die letzte aufgerufene Component abgefragt wodurch man die
     * jetzige Component verlässt und zur übergebnen Component zurück kehrt.
     *
     * @param evt
     */
    private void jB_ZurueckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_ZurueckActionPerformed
        c = null;   //Initialisierung der Componentspeichervariable
        //Erhalten über GUIFactorymethode die letzte aufgerufene View und speichern diese in Variable
        c = this.factory.zurueckButton();
        this.setVisible(false);// Internalframe wird nicht mehr dargestellt
        c.setVisible(true);// Übergebene Component wird sichtbar gemacht
    }//GEN-LAST:event_jB_ZurueckActionPerformed

    /*----------------------------------------------------------*/
    /* Datum Name Was */
    /* 08.01.2015 Terrasi, angelegt, Dokumentation und Logik. */
    /*----------------------------------------------------------*/
    private void AuftragspositionID_jTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AuftragspositionID_jTextFieldKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            Enter_jButtonActionPerformed(null);
        }
    }//GEN-LAST:event_AuftragspositionID_jTextFieldKeyPressed

    /*----------------------------------------------------------*/
    /* Datum Name Was */
    /* 08.01.2015 Terrasi, angelegt, Dokumentation und Logik. */
    /*----------------------------------------------------------*/
    private void auftragskopfID_jTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_auftragskopfID_jTextFieldKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            Enter_jButtonActionPerformed(null);
        }
    }//GEN-LAST:event_auftragskopfID_jTextFieldKeyPressed

    private void jB_SuchenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_SuchenActionPerformed
        this.hauptFenster.rufeSuche(this);
    }//GEN-LAST:event_jB_SuchenActionPerformed

    /*----------------------------------------------------------*/
    /* Datum Name Was */
    /* 10.12.2014 Terrasi, angelegt */
    /* 08.01.2015 Terrasi, Logik implementiert */
    /*----------------------------------------------------------*/
    /**
     * Schnittstellenmethode mit der alle Eingabefelder zurückgesetzt werden
     */
    @Override
    public void zuruecksetzen() {
        //Eingabefelder erhalten einen leeren String
        auftragskopfID_jTextField.setText("");
        AuftragspositionID_jTextField.setText("");
    }

    /*----------------------------------------------------------*/
    /* Datum Name Was */
    /* 10.12.2014 Terrasi, angelegt */
    /* 08.01.2015 Terrasi, Logik implementiert */
    /*----------------------------------------------------------*/
    /*
     Schnittstellenmethode mit der geprüft wird ob alle Eingaben getätigt worden sind.
     */
    @Override
    public void ueberpruefen() {
        //IF-Anweisungen mit denen geprüft wird welche Eingabefelder keine Eingabe 
        // erhalten haben. Diese Eingabefelder werden in passende Speichervariablen festgehalten

        //Eingabefelder für Auftragsposition werden in Variable "fehlendeEingaben" festgehalten.
        if (auftragskopfID_jTextField.getText().equals("")) {
            fehlendeEingaben.add(auftragskopfID_jTextField);
        } else if (AuftragspositionID_jTextField.getText().equals("")) {
            fehlendeEingaben.add(AuftragspositionID_jTextField);
        }
    }

    /*----------------------------------------------------------*/
    /* Datum Name Was */
    /* 10.12.2014 Terrasi, angelegt */
    /* 08.01.2015 Terrasi, Logik implementiert */
    /*----------------------------------------------------------*/
    /**
     * Schnittstellenmethode mit der die Eingaben beim FocusLost auf Richtigkeit
     * geprüft werden.
     *
     * @param textfield, das zu übergeben JTextfield, indem der Focusgesetzt
     * ist.
     * @param syntax, String mit dem eine Eingabe auf das richtige Format hin
     * geprüft wird.
     * @param fehlermelgungtitel, Srting der den Titel der Fehlmeldung enthält.
     * @param fehlermeldung, String der die Fehlmeldung enthält.
     */
    @Override
    public void ueberpruefungVonFocusLost(JTextField textfield, String syntax, String fehlermelgungtitel, String fehlermeldung) {
        if (!textfield.getText().matches(syntax)) {
            //Ausgabe einer Fehlermeldung
            JOptionPane.showMessageDialog(null, fehlermeldung,
                    fehlermelgungtitel, JOptionPane.ERROR_MESSAGE);
            //Mit dem Focus in das übergebene Eingabefeld springen
            textfield.requestFocusInWindow();
            textfield.selectAll();
        }
    }

    /*----------------------------------------------------------*/
    /* Datum Name Was */
    /* 10.12.2014 Terrasi, angelegt */
    /* 08.01.2015 Terrasi, Logik implementiert */
    /*----------------------------------------------------------*/
    /**
     * Schnittstellenmethode mit der die Eingabefelder die nicht ausgefüllt
     * worden sind, farblich markiert werden und eine Meldung ausgegeben wird,
     * inder der Benutzer darauf hingewiesen wird, alle Eingaben zu tätigen.
     *
     * @param list, Arraylist in der die Components die keine Eingaben erhalten
     * haben, gespeichert sind.
     * @param fehlermelgungtitel, Srting der den Titel der Fehlmeldung enthält.
     * @param fehlermeldung, String der die Fehlmeldung enthält.
     * @param farbe, Color in der der Hintergrund der Components markiert werden
     * soll
     */
    @Override
    public void fehlEingabenMarkierung(ArrayList<Component> list, String fehlermelgungtitel, String fehlermeldung, Color farbe) {
        //Meldung die darauf hinweist das nicht alle Eingaben getätigt worden sind.
        JOptionPane.showMessageDialog(null, fehlermeldung,
                fehlermelgungtitel, JOptionPane.WARNING_MESSAGE);
        if (!list.isEmpty()) {

            list.get(0).requestFocusInWindow();// Fokus gelangt in das erste leere Eingabefeld

        }
//        // Alle leeren Eingabefelder werden farblich markiert.
//        for (int i = 0; i <= list.size() - 1; i++) {
//            list.get(i).setBackground(farbe);
//        }

        list.clear();//ArrayList mit leeren Eingabefeldern für den Auftragskopf leeren.
    }

    public void setAuftragskopfID_jTextField(Auftragskopf auftragskopf) {
        this.auftragskopfID_jTextField.
                setText(String.valueOf(auftragskopf.getAuftragskopfID()));
    }

    public void setAuftragspositionID_jTextField(Auftragsposition position) {
        this.AuftragspositionID_jTextField.
                setText(String.valueOf(position.getPositionsnummer()));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AuftragskopfID_jLabel;
    private javax.swing.JTextField AuftragspositionID_jTextField;
    private javax.swing.JButton Enter_jButton;
    private javax.swing.JTextField auftragskopfID_jTextField;
    private javax.swing.JButton jB_Anzeigen;
    private javax.swing.JButton jB_Loeschen;
    private javax.swing.JButton jB_Speichern;
    private javax.swing.JButton jB_Suchen;
    private javax.swing.JButton jB_Zurueck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
